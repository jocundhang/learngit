1. 创建版本库（repository）
    1）创建目录
    mkdir learngit
    cd learngit
    pwd     --显示当前目录
    
    2）将目录变成Git可以管理的仓库
    git init
    
2. 把文件添加到版本库
    git add filename
    git commit -m "wrote a filename file"
    commit 可以一次提交多个文件
    修改文件之后重新提交的过程和上面一样。
    
3.  查看仓库状态
    git status
    git diff 查看具体修改的内容
    
4. 版本回退
    1)查看历史记录
    git log --pretty=oneline 
    HEAD代表当前版本，上一个版本为HEAD^，上上一个版本是HEAD^^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
    
    2)版本回退
    git reset --hard commit_id
    
    3)回到未来版本
    git reflog 查看记录，git reset --hard commit_id返回
    
5. 撤销修改
    1)还未提交到暂存区
    git checkout -- filename
    
    2)提交到暂存区但未提交到版本库
    git reset HEAD filename
    
    3)提交到版本库
    按版本回退的方法撤销

6. 删除文件
    工作区删除   rm filename
    此时恢复用   git checkout -- filename
    
    版本库删除
    git rm filename
    git commit -m " dele statements"
    
7.  关联远程库
    git remote add origin git@github.com:jocundhang/learngit.git(远程库地址)
    第一次推送master分支的所有内容
    git push -u origin master
    推送最新修改内容
    git push origin master

8.  从远程库克隆
    git clone git@github.com:jocundhang/gitskills.git(远程库地址)
    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
    
9.  创建与合并分支
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>
    
10. 解决冲突

11. 分支策略
    master分支应该是稳定的分支，干活都在dev分支上进行，发布新版本时，将dev分支合并到master分支，在master分支发布新版本。
    合并分支时，加上--no--ff参数就可以就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
    
12. Bug分支
    1）修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
    2）当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
    3）可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：git stash apply stash@{0}
    
13. feature分支
    1）开发一个新feature，最好新建一个分支；
    2）如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
    
14. 多人协作
    1）查看远程库信息，使用git remote -v；
    2）本地新建的分支如果不推送到远程，对其他人就是不可见的；
    3）从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    4）在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    5）建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    6）从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。